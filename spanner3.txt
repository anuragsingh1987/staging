Creating a Google Cloud Spanner schema for a banking application involves defining tables and columns to store various pieces of information related to accounts, transactions, customers, and more. Below is a simplified sample schema for a banking application using Google Cloud Spanner:

sql
Copy code
-- Create a database for the banking application
CREATE DATABASE BankDatabase;

-- Use the database
USE BankDatabase;

-- Define a table to store customer information
CREATE TABLE Customers (
  CustomerID INT64 NOT NULL,
  FirstName STRING(50),
  LastName STRING(50),
  Email STRING(100),
  Phone STRING(20),
  Address STRING(200),
  PRIMARY KEY (CustomerID)
);

-- Define a table to store account information
CREATE TABLE Accounts (
  AccountID INT64 NOT NULL,
  CustomerID INT64,
  AccountType STRING(20),
  Balance INT64,
  Status STRING(20),
  PRIMARY KEY (AccountID),
  INTERLEAVE IN PARENT Customers ON DELETE CASCADE
);

-- Define a table to store transaction history
CREATE TABLE Transactions (
  TransactionID INT64 NOT NULL,
  AccountID INT64,
  TransactionType STRING(20),
  Amount INT64,
  TransactionDate TIMESTAMP,
  PRIMARY KEY (AccountID, TransactionID),
) PRIMARY KEY (AccountID, TransactionID),
  INTERLEAVE IN PARENT Accounts ON DELETE CASCADE
);


In this schema:

We create a database named "BankDatabase."
The "Customers" table stores customer information with columns for customer ID, first name, last name, email, phone, and address.
The "Accounts" table stores account information with columns for account ID, customer ID, account type, balance, and status. It's interleaved with the "Customers" table, so accounts are linked to customers, and deleting a customer will also delete their associated accounts.
The "Transactions" table stores transaction history with columns for transaction ID, account ID, transaction type, amount, and transaction date. It's interleaved with the "Accounts" table to establish the relationship between transactions and accounts. Deleting an account will also delete its transaction history.

This is a simplified example, and a real-world banking system would likely have more complex schemas, including additional tables for currencies, user authentication, and various account types. Additionally, you may need to consider security and access control to protect sensitive customer data.